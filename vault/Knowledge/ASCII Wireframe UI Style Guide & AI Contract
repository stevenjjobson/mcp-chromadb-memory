
## Overview

This document establishes standardized conventions for creating ASCII wireframe layouts for application interfaces. These wireframes serve as visual specifications for AI-assisted coding and development workflows.

## Core Concepts

### ASCII Wireframing

ASCII wireframing is a text-based method of creating visual mockups using standard keyboard characters. This approach offers several advantages:

- **Version Control Friendly**: Pure text integrates seamlessly with Git and other VCS
- **Platform Agnostic**: Renders consistently across all text editors and terminals
- **Rapid Prototyping**: No specialized tools required
- **AI-Readable**: LLMs can easily parse and understand ASCII layouts

### Design Paradigm

The wireframe paradigm focuses on **structure over aesthetics**, emphasizing:

- Information hierarchy
- Layout relationships
- Functional groupings
- Navigation flow

## ASCII Character Standards

### Box Drawing Characters

```
┌─┐  ╔═╗  ╭─╮  
│ │  ║ ║  │ │  
└─┘  ╚═╝  ╰─╯  

┌───┬───┐
│   │   │
├───┼───┤
│   │   │
└───┴───┘
```

### Character Legend

|Character|Purpose|Example Usage|
|---|---|---|
|`┌─┐└─┘│`|Primary containers|Main panels, modals|
|`╔═╗╚═╝║`|Emphasized containers|Headers, important sections|
|`╭─╮╰─╯│`|Rounded containers|Cards, soft boundaries|
|`┬┴┼├┤`|Dividers/Connectors|Grid layouts, separators|
|`▓▒░`|Fill patterns|Progress bars, disabled states|
|`▲▼◄►`|Directional indicators|Arrows, sort indicators|
|`●○◆◇`|Status indicators|Bullets, selection states|

## Layout Conventions

### Grid System

Use a consistent character-based grid:

```
┌─────────────────────────────────────────────────────────────────────────────┐
│ Header (Full Width - 77 chars)                                             │
├─────────────────────────────────────────────────────────────────────────────┤
│ Navigation (12)    │ Main Content (45)              │ Sidebar (18)         │
│                    │                                │                      │
│ • Dashboard        │ ┌─────────────────────────────┐ │ ╔═══════════════╗    │
│ • Users            │ │ Content Area                │ │ ║ Quick Actions ║    │
│ • Settings         │ │                             │ │ ╚═══════════════╝    │
│                    │ │ Lorem ipsum dolor sit amet  │ │                      │
│                    │ │ consectetur adipiscing elit │ │ Recent Items:        │
│                    │ └─────────────────────────────┘ │ • Item 1             │
│                    │                                │ • Item 2             │
└────────────────────┴────────────────────────────────┴──────────────────────┘
```

### Component Templates

#### Form Layout

```
┌─ Form Title ─────────────────────────────────┐
│                                              │
│ Label:          [Input Field              ] │
│                                              │
│ Dropdown:       [Selected Option        ▼] │
│                                              │
│ Text Area:      ┌─────────────────────────┐  │
│                 │ Multi-line text input   │  │
│                 │                         │  │
│                 └─────────────────────────┘  │
│                                              │
│ ☐ Checkbox Option                            │
│ ☑ Selected Checkbox                          │
│                                              │
│              [Cancel]  [Submit]              │
└──────────────────────────────────────────────┘
```

#### Data Table

```
┌─ Table Title ───────────────────────────────────────────────────┐
│ ┌─ Filter ────┐  ┌─ Search ─────────────┐  [+ Add New]         │
│ │ All Items ▼ │  │ 🔍 Search terms...   │                      │
│ └─────────────┘  └──────────────────────┘                      │
├─────────────────────────────────────────────────────────────────┤
│ Name           │ Status    │ Date       │ Actions             │
├────────────────┼───────────┼────────────┼─────────────────────┤
│ Item One       │ ● Active  │ 2024-01-15 │ [Edit] [Delete]     │
│ Item Two       │ ○ Pending │ 2024-01-14 │ [Edit] [Delete]     │
│ Item Three     │ ● Active  │ 2024-01-13 │ [Edit] [Delete]     │
├────────────────┴───────────┴────────────┴─────────────────────┤
│ Showing 1-3 of 25 items          [◄ Prev] [1] [2] [3] [Next ►] │
└─────────────────────────────────────────────────────────────────┘
```

#### Modal Dialog

```
                    ┌─ Modal Title ──────────────┐
                    │                            │
                    │ Modal content goes here.   │
                    │                            │
                    │ This is a confirmation     │
                    │ dialog asking the user     │
                    │ to confirm their action.   │
                    │                            │
                    │         [Cancel] [OK]      │
                    └────────────────────────────┘
```

## AI Contract Specifications

### Requirements for AI Implementation

When converting ASCII wireframes to code, the AI must:

1. **Maintain Structural Fidelity**
    
    - Preserve the exact layout proportions shown in the wireframe
    - Respect component positioning and sizing relationships
    - Implement proper responsive breakpoints as indicated
2. **Component Mapping Standards**
    
    ```
    ASCII Element → Implementation
    ───────────────────────────────
    [Button Text] → <button> or equivalent
    [Input Field] → <input> with proper type
    ┌─Title─┐     → Container with header
    ● ○ ☑ ☐      → Radio buttons, checkboxes
    ▼ ▲          → Dropdown indicators, sort controls
    ```
    
3. **Accessibility Requirements**
    
    - Generate semantic HTML structure
    - Include proper ARIA labels and roles
    - Ensure keyboard navigation follows wireframe flow
    - Maintain color contrast ratios above 4.5:1
4. **Framework Integration**
    
    - Use consistent CSS class naming (BEM methodology preferred)
    - Implement responsive grid systems (CSS Grid/Flexbox)
    - Generate component-based code (React, Vue, Angular as specified)

### Deliverable Standards

The AI must provide:

1. **Complete Implementation Package**
    
    - HTML structure matching wireframe
    - CSS styling with responsive design
    - JavaScript for interactive elements
    - Framework-specific components if requested
2. **Documentation**
    
    - Component usage examples
    - Customization options
    - Integration instructions
3. **Quality Assurance**
    
    - Cross-browser compatibility notes
    - Mobile responsiveness validation
    - Accessibility compliance checklist

## Annotation System

### Interactive Elements

```
[Button]     - Clickable button element
<Input>      - Text input field
{Dropdown}   - Select dropdown menu
((Toggle))   - Switch/toggle control
[[Link]]     - Navigation link
```

### State Indicators

```
[Button:disabled]   - Non-interactive state
[Input:focus]       - Currently selected
[Button:primary]    - Primary action
[Button:danger]     - Destructive action
{Dropdown:open}     - Expanded state
```

### Content Placeholders

```
Lorem ipsum...      - Body text content
[Image 400x300]     - Image placeholder with dimensions
[Icon:user]         - Icon with semantic name
[Logo]              - Brand/logo placement
*** Loading ***     - Loading state indicator
```

## File Organization

### Wireframe File Structure

```
project-wireframes/
├── 01-layouts/
│   ├── desktop-layout.txt
│   ├── tablet-layout.txt
│   └── mobile-layout.txt
├── 02-components/
│   ├── navigation.txt
│   ├── forms.txt
│   └── data-tables.txt
├── 03-flows/
│   ├── user-registration.txt
│   └── checkout-process.txt
└── README.md
```

### Naming Conventions

- Use descriptive, hyphen-separated names
- Include device breakpoint in layout files
- Version files with semantic versioning (v1.0.0)
- Group related wireframes in numbered directories

## Quality Checklist

### Pre-Implementation Review

- [ ] All containers properly closed with matching characters
- [ ] Consistent spacing and alignment throughout
- [ ] Clear annotation of interactive elements
- [ ] Proper use of emphasis characters for hierarchy
- [ ] Responsive considerations documented

### Post-Implementation Validation

- [ ] Visual fidelity matches wireframe structure
- [ ] All interactive elements function correctly
- [ ] Responsive behavior follows wireframe specifications
- [ ] Accessibility standards met
- [ ] Cross-browser compatibility verified

## Example Workflow

1. **Create ASCII wireframe** using this style guide
2. **Annotate interactive elements** with proper syntax
3. **Submit to AI** with specific framework requirements
4. **Review generated code** against quality checklist
5. **Iterate** based on feedback and requirements

## VSCode Extension Wireframe Templates

### Extension Paradigm Concepts

**VSCode Extension Architecture** leverages several key UI paradigms:

- **Activity Bar Extensions**: Primary navigation entries
- **Side Panel Views**: Custom explorers and tool panels
- **Editor Integration**: Inline decorations and overlays
- **Command Palette**: Text-based command interface
- **Status Bar**: Persistent state indicators
- **Webview Panels**: Rich HTML/CSS/JS interfaces

### Activity Bar & Side Panel Layout

```
VSCode Window Layout:
┌─ Activity Bar ─┬─ Side Panel ──────────────┬─ Editor Group ────────────────┐
│               │                           │                               │
│ ┌───┐         │ ┌─ EXTENSION NAME ───────┐ │ ┌─ file.js ─────────────────┐ │
│ │ 🔍 │         │ │                        │ │ │ 1  function example() {   │ │
│ │   │         │ │ ╔══ Section Header ═══╗ │ │ │ 2    // Your code here    │ │
│ │📁 │         │ │ ║                     ║ │ │ │ 3    return true;         │ │
│ │   │         │ │ ║ • Item One          ║ │ │ │ 4  }                      │ │
│ │🔧 │         │ │ ║ • Item Two          ║ │ │ │                           │ │
│ │   │◄────────┤ │ ║ • Item Three        ║ │ │ │ [Diagnostics] [Problems]  │ │
│ │📊 │ Active  │ │ ╚═════════════════════╝ │ │ └───────────────────────────┘ │
│ │   │         │ │                        │ │                               │
│ └───┘         │ │ [+ Add New] [⚙️ Config] │ │                               │
│               │ └────────────────────────┘ │                               │
└───────────────┴───────────────────────────┴───────────────────────────────┘
```

### Tree View Explorer Template

```
┌─ EXTENSION: Project Manager ─────────────────────┐
│ 🔍 [Search projects...                       ] │
├─────────────────────────────────────────────────┤
│                                                 │
│ ▼ 📁 Recent Projects                            │
│   ├─ 📄 my-website                              │
│   ├─ 📄 api-server                              │
│   └─ 📄 mobile-app                              │
│                                                 │
│ ▼ 📁 Favorites                                  │
│   ├─ ⭐ core-library                            │
│   └─ ⭐ documentation                           │
│                                                 │
│ ▼ 📁 All Projects                               │
│   ├─ 📄 archived-project                       │
│   ├─ 📄 experimental-feature                   │
│   └─ 📄 legacy-codebase                        │
│                                                 │
│ ┌─ Quick Actions ──────────────────────────────┐ │
│ │ [+ New Project]  [📁 Open Folder]           │ │
│ │ [⚙️ Settings]     [🔄 Refresh]              │ │
│ └───────────────────────────────────────────────┘ │
└─────────────────────────────────────────────────┘

Context Menu (Right-click on item):
┌─────────────────────┐
│ Open in New Window  │
│ Add to Favorites    │
├─────────────────────┤
│ Rename Project      │
│ Delete Project      │
├─────────────────────┤
│ Show in Explorer    │
│ Copy Path           │
└─────────────────────┘
```

### Webview Panel Interface

```
┌─ Extension Panel: Code Analytics ─── [⚙️] [📌] [✕] ┐
│ Tab: Overview | Details | Settings                  │
├─────────────────────────────────────────────────────┤
│                                                     │
│ ╔═══ Project Statistics ═══════════════════════════╗ │
│ ║                                                 ║ │
│ ║ Total Lines:     12,458    Languages: 5        ║ │
│ ║ Total Files:       247     Last Updated: 2h ago ║ │
│ ║ Code Quality:    ████▒ 85% Test Coverage: 76%  ║ │
│ ║                                                 ║ │
│ ╚═════════════════════════════════════════════════╝ │
│                                                     │
│ ┌─ File Type Breakdown ─────────────────────────────┐ │
│ │ JavaScript   ███████████████████▓▓▓ 68%          │ │
│ │ TypeScript   ██████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ 22%          │ │
│ │ HTML/CSS     ██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  7%          │ │
│ │ Other        █▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  3%          │ │
│ └───────────────────────────────────────────────────┘ │
│                                                     │
│ ┌─ Recent Activity ─────────────────────────────────┐ │
│ │ • Fixed linting errors in auth.js                │ │
│ │ • Added unit tests for user service              │ │
│ │ • Refactored database connection logic           │ │
│ │ • Updated dependencies in package.json           │ │
│ │                                   [View More...] │ │
│ └───────────────────────────────────────────────────┘ │
│                                                     │
│             [🔄 Refresh Data] [📊 Export Report]    │
└─────────────────────────────────────────────────────┘
```

### Command Palette Integration

```
Command Palette (Ctrl+Shift+P):
┌─ > extension command ─────────────────────────────────┐
│                                                       │
│ Extension: Project Manager                            │
│ > Extension: Add New Project                          │
│ > Extension: Open Recent Project                      │
│ > Extension: Switch to Project                        │
│ > Extension: Remove Project from List                 │
│ > Extension: Edit Project Settings                    │
│                                                       │
│ Extension: Code Analytics                             │
│ > Extension: Generate Code Report                     │
│ > Extension: Analyze Current File                     │
│ > Extension: Show Project Statistics                  │
│                                                       │
│ Extension: Theme Manager                              │
│ > Extension: Switch Theme                             │
│ > Extension: Create Custom Theme                      │
│                                                       │
│ ┌─ Recently Used ─────────────────────────────────────┐ │
│ │ Extension: Open Recent Project                     │ │
│ │ Extension: Generate Code Report                    │ │
│ └─────────────────────────────────────────────────────┘ │
└───────────────────────────────────────────────────────┘
```

### Settings/Configuration Panel

```
┌─ Extension Settings: Code Formatter ─────────────────┐
│                                                      │
│ ┌─ General ─────────────────────────────────────────┐ │
│ │                                                  │ │
│ │ Enable auto-format on save                      │ │
│ │ ☑ Enabled                                        │ │
│ │                                                  │ │
│ │ Format on paste                                  │ │
│ │ ☐ Enabled                                        │ │
│ │                                                  │ │
│ │ Indentation style                                │ │
│ │ ○ Spaces  ● Tabs  Tab size: [4    ]             │ │
│ │                                                  │ │
│ └──────────────────────────────────────────────────┘ │
│                                                      │
│ ┌─ Language Specific ──────────────────────────────┐ │
│ │                                                  │ │
│ │ JavaScript/TypeScript                            │ │
│ │ ☑ Use Prettier configuration                     │ │
│ │ ☑ Format imports                                 │ │
│ │ Quote style: [Double quotes          ▼]         │ │
│ │                                                  │ │
│ │ Python                                           │ │
│ │ ☐ Use Black formatter                            │ │
│ │ Line length: [88      ]                          │ │
│ │                                                  │ │
│ └──────────────────────────────────────────────────┘ │
│                                                      │
│ ┌─ Advanced ───────────────────────────────────────┐ │
│ │                                                  │ │
│ │ Custom formatter path:                           │ │
│ │ [/usr/local/bin/prettier                       ] │ │
│ │                                                  │ │
│ │ Additional arguments:                            │ │
│ │ [--single-quote --trailing-comma es5          ] │ │
│ │                                                  │ │
│ └──────────────────────────────────────────────────┘ │
│                                                      │
│              [Reset to Defaults] [Save Settings]     │
└──────────────────────────────────────────────────────┘
```

### Status Bar Integration

```
VSCode Status Bar:
┌─────────────────────────────────────────────────────────────────────────────┐
│ Ln 45, Col 12 │ Spaces: 4 │ UTF-8 │ JavaScript │ ⚠️ 3 │ Extension: ✓ Active │
└─────────────────────────────────────────────────────────────────────────────┘

Status Bar Item Details:
┌─ Extension Status ─────────────────┐
│ ● Project Manager: 15 projects    │  ← Click to open project list
│ ● Code Analytics: 85% quality     │  ← Click to show detailed report  
│ ● Git Helper: 5 changes           │  ← Click to show git panel
│ ⚠️ Linter: 3 warnings             │  ← Click to show problems panel
└────────────────────────────────────┘
```

### Editor Integration (Decorations & Hovers)

```
Editor with Extension Decorations:
┌─ main.js ─────────────────────────────────────────────┐
│ 1  function calculateTotal(items) {                   │
│ 2    let total = 0;                    ● ← Code Lens │
│ 3    for (const item of items) {      📊 Performance │
│ 4      total += item.price;           ████▓▓▓▓▓ 75%  │
│ 5    }                                                │
│ 6    return total;                     ⚠️ Complexity │
│ 7  }                                  ▲ Warning Here │
│ 8                                                     │
│ 9  // TODO: Add validation           📝 Todo Marker  │
│10  const result = calculateTotal([    ┌─ Hover ─────┐│
│11    { price: 10.99 },               │ Function:    ││
│12    { price: 25.50 }                │ calculateTotal││
│13  ]);                               │              ││
│                                      │ Complexity: 3││
│                                      │ Lines: 6     ││
│                                      │ Called: 2x   ││
│                                      └──────────────┘│
└───────────────────────────────────────────────────────┘
```

### Extension-Specific Annotation Syntax

```
VSCode Extension Elements:
[[TreeItem]]         - Tree view item
{{Command}}          - Command palette command
<<StatusBar>>        - Status bar item
((Webview))          - Webview panel
[[Menu:context]]     - Context menu
{{Setting:config}}   - Configuration option
<<Decoration:type>>  - Editor decoration
```

### Extension Capability Templates

#### File Explorer Extension

```
┌─ CUSTOM EXPLORER ──────────────────────────────────┐
│ 🔍 [Filter files...                             ] │
├───────────────────────────────────────────────────┤
│ ▼ 📁 Source Files                                 │
│   ├─ 📄 index.js                    [[TreeItem]]  │
│   ├─ 📄 utils.js                    [[TreeItem]]  │
│   └─ 📁 components/                 [[TreeItem]]  │
│       ├─ 📄 Button.jsx              [[TreeItem]]  │
│       └─ 📄 Modal.jsx               [[TreeItem]]  │
│                                                   │
│ ▼ 📁 Generated Files                              │
│   ├─ 📄 bundle.js                   [[TreeItem]]  │
│   └─ 📄 styles.css                  [[TreeItem]]  │
│                                                   │
│ Actions: {{Command:refresh}} {{Command:settings}} │
└───────────────────────────────────────────────────┘
```

#### Diagnostic/Problems Integration

```
┌─ PROBLEMS ─────────────────────────────────────────┐
│ ⚠️ 3 warnings  ❌ 1 error  ℹ️ 2 info              │
├───────────────────────────────────────────────────┤
│                                                   │
│ ❌ Error: Undefined variable 'userName'           │
│    📄 auth.js:15:5                                │
│    <<Decoration:error>>                           │
│                                                   │
│ ⚠️ Warning: Unused import 'React'                 │
│    📄 App.jsx:1:8                                 │
│    <<Decoration:warning>>                         │
│                                                   │
│ ⚠️ Warning: Consider using const instead of let   │
│    📄 utils.js:23:3                               │
│    <<Decoration:suggestion>>                      │
│                                                   │
│ ℹ️ Info: Consider adding JSDoc comment            │
│    📄 helpers.js:45:1                             │
│    <<Decoration:info>>                            │
│                                                   │
└───────────────────────────────────────────────────┘
```

### AI Contract Extensions for VSCode

When implementing VSCode extensions from wireframes, AI must:

1. **Generate Extension Manifest (package.json)**
    
    - Define activation events
    - Register commands and views
    - Specify contribution points
    - Include proper extension metadata
2. **Implement VSCode API Integration**
    
    ```
    ASCII Element → VSCode API
    ─────────────────────────────
    [[TreeItem]]    → vscode.TreeItem
    {{Command}}     → vscode.commands.registerCommand
    <<StatusBar>>   → vscode.window.createStatusBarItem
    ((Webview))     → vscode.window.createWebviewPanel
    ```
    
3. **Extension-Specific Requirements**
    
    - Follow VSCode extension guidelines
    - Implement proper disposal patterns
    - Handle extension lifecycle events
    - Provide telemetry and error handling
4. **Testing Framework Integration**
    
    - Generate extension test suites
    - Include activation/deactivation tests
    - Test command execution
    - Validate UI component rendering

---

_This document serves as both a creative specification and a technical contract for AI-assisted development workflows. Regular updates should be made to reflect evolving best practices and new requirements._